#!/bin/bash

. k8s-read-config "$@"
. docker-resolve

if [ -z "$EXTERNAL_REGISTRY_BASE_DOMAIN" ]; then echo EXTERNAL_REGISTRY_BASE_DOMAIN must be set; exit 1; fi
if [ -z "$REPOSITORY_NAME" ];               then echo REPOSITORY_NAME must be set; exit 1; fi
if [ -z "$DOCKERTAG" ];                     then echo DOCKERTAG must be set; exit 1; fi
if [ -z "$CI_SHA1" ];                       then echo CI_SHA1 must be set; exit 1; fi
if [ -z "$CI_BUILD_NUM" ];                  then echo CI_BUILD_NUM must be set; exit 1; fi

# support overriding "latest"
DOCKER_LATEST_TAG=${DOCKER_LATEST_TAG:-latest}

CI_TAG=$(echo "${CI_TAG}" | tr / _)
CI_BRANCH=$(echo "${CI_BRANCH}" | tr / _)

# support list of tag versions
BUILD_TAG_PREFIX=${BUILD_TAG_PREFIX:-build_}
# shellcheck disable=2198
if [ -z "${DOCKER_TAG_VERSIONS[@]}" ]; then
  DOCKER_TAG_VERSIONS=("$CI_SHA1" "$BUILD_TAG_PREFIX$CI_BUILD_NUM")
  if [ -n "${CI_TAG}" ]; then
    DOCKER_TAG_VERSIONS+=($CI_TAG)
  fi
  if [ -n "${CI_BRANCH}" ]; then
    DOCKER_TAG_VERSIONS+=($CI_BRANCH)
  fi
fi
if [ "${PUSH_ALL_VERSION_TAGS}" == "true" && -n "${CI_TAG}" ]; then
  tag="${CI_TAG}"
  while [[ ${tag} =~ "." ]]
  do
    new_tag=$(echo $tag | sed -e 's/\.\w\+$//')
    if [ "${new_tag}" == "${tag}" ]; then
      break
    fi
    tag=$new_tag
    DOCKER_TAG_VERSIONS+=($tag)
  done
fi

# check for additional tags
# shellcheck disable=2198
if [ -z "${ADDITIONAL_DOCKER_TAG_VERSIONS[@]}" ]; then
  ADDITIONAL_DOCKER_TAG_VERSIONS=()
fi

# shellcheck disable=2206
ALL_DOCKER_TAG_VERSIONS=(${DOCKER_TAG_VERSIONS[@]} ${ADDITIONAL_DOCKER_TAG_VERSIONS[@]})

tag_push() {
  if ! docker tag "$1" "$2"
  then
    echo "Unable to tag image, aborting"
    exit 1
  fi

  if ! docker push "$2"
  then
    echo "Unable to push docker image, aborting."
    exit 1
  fi
}

if [ "$DOCKER_BUILD_CACHE_FROM" == "available" ]; then
  # shellcheck disable=2086
  while read -r CACHE_TARGET; do
    TARGET_TAG=cache-${CI_REF}-${CACHE_TARGET}
    TARGET_IMAGE=${EXTERNAL_REGISTRY_BASE_DOMAIN}/${REPOSITORY_NAME}
    echo "Pushing ${TARGET_IMAGE}:${TARGET_TAG}..."
    docker push "${TARGET_IMAGE}:${TARGET_TAG}"
  done <<< "$(grep -i '^FROM.* AS ' ${DOCKERFILE} | awk '{print $4}')"
fi

for DOCKER_TAG_VERSION in "${ALL_DOCKER_TAG_VERSIONS[@]}"; do
  echo "Pushing ${DOCKERTAG}:${DOCKER_LATEST_TAG} as ${EXTERNAL_REGISTRY_BASE_DOMAIN}/${REPOSITORY_NAME}:${DOCKER_TAG_VERSION}"
  tag_push "${DOCKERTAG}:${DOCKER_LATEST_TAG}" "${EXTERNAL_REGISTRY_BASE_DOMAIN}/${REPOSITORY_NAME}:${DOCKER_TAG_VERSION}"
done
